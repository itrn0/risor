// Code generated by risor-modgen. DO NOT EDIT.

package gha

import (
	"context"
	"github.com/itrn0/risor/object"
)

// IsDebug is a wrapper function around [isDebug]
// that implements [object.BuiltinFunction].
func IsDebug(ctx context.Context, args ...object.Object) object.Object {
	if len(args) != 0 {
		return object.NewArgsError("gha.is_debug", 0, len(args))
	}
	result := isDebug(ctx)
	return object.NewBool(result)
}

// LogDebug is a wrapper function around [logDebug]
// that implements [object.BuiltinFunction].
func LogDebug(ctx context.Context, args ...object.Object) object.Object {
	if len(args) != 1 {
		return object.NewArgsError("gha.log_debug", 1, len(args))
	}
	msgParam := args[0]
	result := logDebug(ctx, msgParam)
	return result
}

// StartGroup is a wrapper function around [startGroup]
// that implements [object.BuiltinFunction].
func StartGroup(ctx context.Context, args ...object.Object) object.Object {
	if len(args) != 1 {
		return object.NewArgsError("gha.start_group", 1, len(args))
	}
	msgParam, err := object.AsString(args[0])
	if err != nil {
		return err
	}
	result := startGroup(ctx, msgParam)
	return result
}

// EndGroup is a wrapper function around [endGroup]
// that implements [object.BuiltinFunction].
func EndGroup(ctx context.Context, args ...object.Object) object.Object {
	if len(args) != 0 {
		return object.NewArgsError("gha.end_group", 0, len(args))
	}
	result := endGroup(ctx)
	return result
}

// SetOutput is a wrapper function around [setOutput]
// that implements [object.BuiltinFunction].
func SetOutput(ctx context.Context, args ...object.Object) object.Object {
	if len(args) != 2 {
		return object.NewArgsError("gha.set_output", 2, len(args))
	}
	keyParam, err := object.AsString(args[0])
	if err != nil {
		return err
	}
	valueParam := args[1]
	result := setOutput(ctx, keyParam, valueParam)
	return result
}

// SetEnv is a wrapper function around [setEnv]
// that implements [object.BuiltinFunction].
func SetEnv(ctx context.Context, args ...object.Object) object.Object {
	if len(args) != 2 {
		return object.NewArgsError("gha.set_env", 2, len(args))
	}
	keyParam, err := object.AsString(args[0])
	if err != nil {
		return err
	}
	valueParam := args[1]
	result := setEnv(ctx, keyParam, valueParam)
	return result
}

// AddPath is a wrapper function around [addPath]
// that implements [object.BuiltinFunction].
func AddPath(ctx context.Context, args ...object.Object) object.Object {
	if len(args) != 1 {
		return object.NewArgsError("gha.add_path", 1, len(args))
	}
	pathParam, err := object.AsString(args[0])
	if err != nil {
		return err
	}
	result := addPath(ctx, pathParam)
	return result
}

// addGeneratedBuiltins adds the generated builtin wrappers to the given map.
//
// Useful if you want to write your own "Module()" function.
func addGeneratedBuiltins(builtins map[string]object.Object) map[string]object.Object {
	builtins["is_debug"] = object.NewBuiltin("is_debug", IsDebug)
	builtins["log_debug"] = object.NewBuiltin("log_debug", LogDebug)
	builtins["start_group"] = object.NewBuiltin("start_group", StartGroup)
	builtins["end_group"] = object.NewBuiltin("end_group", EndGroup)
	builtins["set_output"] = object.NewBuiltin("set_output", SetOutput)
	builtins["set_env"] = object.NewBuiltin("set_env", SetEnv)
	builtins["add_path"] = object.NewBuiltin("add_path", AddPath)
	return builtins
}
